theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(filter(combi, Pclass==3 & Embarked=="S"), aes(Fare))
ggplot(filter(combi, Pclass==3 & Embarked=="S"), aes(Fare)) +
geom_density(fill="blue", alpha=0.5) +
geom_vline(aes(xintercept=median(Fare, na.rm=T)), colour='darkblue', linetype='dashed', size=2) +
geom_vline(aes(xintercept=mean(Fare, na.rm=T)), colour='red', linetype='dashed', size=2) +
ggtitle("Fare distribution of third class passengers \n embarked from Southampton port") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
titanic$Fare[is.na(titanic$Fare)==TRUE] = median(filter(titanic, Pclass==3 & Embarked=="S")$Fare, na.rm=TRUE)
combi$Fare[is.na(combi$Fare)==TRUE] = median(filter(combi, Pclass==3 & Embarked=="S")$Fare, na.rm=TRUE)
colSums(is.na(titanic)|titanic=='')
colSums(is.na(combi)|combi=='')
# Vemos ahora qué falta en "Embarked"
filter(titanic, is.na(Embarked)==TRUE|Embarked=='')
# Vemos ahora qué falta en "Embarked"
filter(combi, is.na(Embarked)==TRUE|Embarked=='')
# Vemos ahora qué falta en "Embarked"
filter(combi, is.na(Embarked)==TRUE|Embarked=='')
table(filter(titanic, Pclass==1)$Embarked)
table(filter(combi, Pclass==1)$Embarked)
ggplot(filter(titanic, is.na(Embarked)==FALSE & Embarked!='' & Pclass==1),
aes(Embarked, Fare)) +
geom_boxplot(aes(colour = Embarked)) +
geom_hline(aes(yintercept=80), colour='red', linetype='dashed', size=2) +
ggtitle("Fare distribution of first class passengers") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(filter(combi, is.na(Embarked)==FALSE & Embarked!='' & Pclass==1),
aes(Embarked, Fare)) +
geom_boxplot(aes(colour = Embarked)) +
geom_hline(aes(yintercept=80), colour='red', linetype='dashed', size=2) +
ggtitle("Fare distribution of first class passengers") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
combi$Embarked[combi$Embarked==""] = "C"
colSums(is.na(combi)|combi=='')
impute_age <- function(age,class){
vector <- age
for (i in 1:length(age)){
if (is.na(age[i])){
if (class[i] == 1){
vector[i] <- round(mean(filter(titanic,Pclass==1)$Age, na.rm=TRUE),0)
}else if (class[i] == 2){
vector[i] <- round(mean(filter(titanic,Pclass==2)$Age, na.rm=TRUE),0)
}else{
vector[i] <- round(mean(filter(titanic,Pclass==3)$Age, na.rm=TRUE),0)
}
}else{
vector[i]<-age[i]
}
}
return(vector)
}
imputed.age <- impute_age(combi$Age,combi$Pclass)
combi$Age <- imputed.age
impute_age <- function(age,class){
vector <- age
for (i in 1:length(age)){
if (is.na(age[i])){
if (class[i] == 1){
vector[i] <- round(mean(filter(combi,Pclass==1)$Age, na.rm=TRUE),0)
}else if (class[i] == 2){
vector[i] <- round(mean(filter(combi,Pclass==2)$Age, na.rm=TRUE),0)
}else{
vector[i] <- round(mean(filter(combi,Pclass==3)$Age, na.rm=TRUE),0)
}
}else{
vector[i]<-age[i]
}
}
return(vector)
}
imputed.age <- impute_age(combi$Age,combi$Pclass)
combi$Age <- imputed.age
colSums(is.na(combi)|combi=='')
head(combi$Name)
combi$Title <- gsub("^.*, (.*?)\\..*$", "\\1", combi$Name)
str(combi$Title)
table(titanic$Sex, titanic$Title)
table(combi$Sex, combi$Title)
combi$Title[combi$Title == 'Mlle' | combi$Title == 'Ms'] <- 'Miss'
combi$Title[combi$Title == 'Mme']  <- 'Mrs'
combi$Title[combi$Title %in% Other]  <- 'Other'
Other <- c('Dona', 'Dr', 'Lady', 'the Countess','Capt', 'Col', 'Don', 'Jonkheer', 'Major', 'Rev', 'Sir')
combi$Title[combi$Title %in% Other]  <- 'Other'
table(titanic$Sex, titanic$Title)
table(combi$Sex, combi$Title)
FamilySize <- combi$SibSp + combi$Parch + 1
table(FamilySize)
titanic$FamilySize <- sapply(1:nrow(titanic), function(x)
ifelse(FamilySize[x]==1, "Single",
ifelse(FamilySize[x]>4, "Large", "Small")))
combi$FamilySize <- sapply(1:nrow(combi), function(x)
ifelse(FamilySize[x]==1, "Single",
ifelse(FamilySize[x]>4, "Large", "Small")))
table(combi$FamilySize)
colSums(is.na(combi)|combi=='')
View(combi)
combi$Survived = factor(combi$Survived)
combi$Pclass = factor(combi$Pclass)
combi$Sex = factor(combi$Sex)
combi$Embarked = factor(combi$Embarked)
combi$Title = factor(combi$Title)
combi$FamilySize = factor(combi$FamilySize, levels=c("Single","Small","Large"))
ggplot(filter(combi, is.na(Survived)==FALSE), aes(Pclass, fill=Survived)) +
geom_bar(aes(y = (..count..)/sum(..count..)), alpha=0.9, position="dodge") +
scale_fill_brewer(palette = "Dark2", direction = -1) +
scale_y_continuous(labels=percent, breaks=seq(0,0.6,0.05)) +
ylab("Percentage") +
ggtitle("Survival Rate based on Pclass") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(filter(combi, is.na(Survived)==FALSE), aes(Pclass, fill=Survived)) +
geom_bar(aes(y = (..count..)/sum(..count..)), alpha=0.9, position="dodge") +
scale_fill_brewer(palette = "Dark2", direction = -1) +
scale_y_continuous(labels=percent, breaks=seq(0,0.6,0.05)) +
ylab("Percentage") +
ggtitle("Survival Rate based on Pclass") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(filter(combi, is.na(Survived)==FALSE), aes(Pclass, fill=Survived)) +
geom_bar(aes(y = (..count..)/sum(..count..)), alpha=0.9, position="dodge") +
scale_fill_brewer(palette = "Dark2", direction = -1) +
scale_y_continuous(labels=scales::percent, breaks=seq(0,0.6,0.05)) +
ylab("Percentage") +
ggtitle("Survival Rate based on Pclass") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(filter(combi, is.na(Survived)==FALSE), aes(Pclass, fill=Survived)) +
geom_bar(aes(y = (..count..)/sum(..count..)), alpha=0.9, position="dodge") +
scale_fill_brewer(palette = "Dark2", direction = -1) +
scale_y_continuous(labels=scales::percent, breaks=seq(0,0.6,0.05)) +
ylab("Porcentaje") +
ggtitle("Tasa de supervivencia basada en Pclass") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(filter(titanic, is.na(Survived)==FALSE), aes(Sex, fill=Survived)) +
geom_bar(aes(y = (..count..)/sum(..count..)), alpha=0.9) +
facet_wrap(~Pclass) +
scale_fill_brewer(palette = "Dark2", direction = -1) +
scale_y_continuous(labels=percent, breaks=seq(0,0.4,0.05)) +
ylab("Percentage") +
ggtitle("Survival Rate based on Pclass and Sex") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(filter(combi, is.na(Survived)==FALSE), aes(Sex, fill=Survived)) +
geom_bar(aes(y = (..count..)/sum(..count..)), alpha=0.9) +
facet_wrap(~Pclass) +
scale_fill_brewer(palette = "Dark2", direction = -1) +
scale_y_continuous(labels=percent, breaks=seq(0,0.4,0.05)) +
ylab("Percentage") +
ggtitle("Survival Rate based on Pclass and Sex") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(filter(combi, is.na(Survived)==FALSE), aes(Sex, fill=Survived)) +
geom_bar(aes(y = (..count..)/sum(..count..)), alpha=0.9) +
facet_wrap(~Pclass) +
scale_fill_brewer(palette = "Dark2", direction = -1) +
scale_y_continuous(labels=scales::percent, breaks=seq(0,0.4,0.05)) +
ylab("Percentage") +
ggtitle("Survival Rate based on Pclass and Sex") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(filter(combi, is.na(Survived)==FALSE), aes(Pclass, Age)) +
geom_violin(aes(fill=Survived), alpha=0.9) +
facet_wrap(~Survived) +
scale_fill_brewer(palette = "Dark2", direction = -1) +
ggtitle("Survival Rate based on Pclass and Age") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(filter(combi, is.na(Survived)==FALSE), aes(Title)) +
geom_bar(aes(fill=Survived), alpha=0.9, position="fill") +
facet_wrap(~Pclass) +
scale_fill_brewer(palette="Set1") +
scale_y_continuous(labels=scales::percent, breaks=seq(0,1,0.1)) +
ylab("Percentage") +
ggtitle("Survival Rate based on Pclass and Title") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(filter(combi, is.na(Survived)==FALSE), aes(Title)) +
geom_bar(aes(fill=Survived), alpha=0.9, position="fill") +
facet_wrap(~FamilySize) +
scale_fill_brewer(palette="Set1") +
scale_y_continuous(labels=scales::percent, breaks=seq(0,1,0.1)) +
ylab("Percentage") +
ggtitle("Survival Rate based on FamilySize and Title") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(filter(combi, is.na(Survived)==FALSE), aes(Embarked, Fare)) +
geom_boxplot(aes(fill=Survived), alpha=0.9) +
facet_wrap(~Survived) +
scale_fill_manual(values=c("#56B4E9", "#CC79A7")) +
ggtitle("Survival Rate based on Embarked and Fare") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
new_train <- combi[1:891, c("Survived","Pclass","Sex","Age","SibSp","Parch","Fare","Embarked","Title","FamilySize")]
new_test <- combi[892:1309, c("Pclass","Sex","Age","SibSp","Parch","Fare","Embarked","Title","FamilySize")]
set.seed(123)
split = sample.split(new_train$Survived, SplitRatio = 0.8)
train_train = subset(new_train, split == TRUE)
train_test = subset(new_train, split == FALSE)
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(new_train$Survived, SplitRatio = 0.8)
train_train = subset(new_train, split == TRUE)
train_test = subset(new_train, split == FALSE)
cor(train_train[,unlist(lapply(train_train,is.numeric))])
classifier = glm(Survived ~ ., family = binomial(link='logit'), data = train_train)
classifier <- step(classifier)
summary(classifier)
vif(classifier)
install.packages('car')
library(car)
vif(classifier)
classifier = glm(Survived ~ . -Sex, family = binomial(link='logit'), data = train_train)
classifier <- step(classifier)
summary(classifier)
vif(classifier)
durbinWatsonTest(classifier)
prob_pred = predict(classifier, type = 'response', newdata = train_test)
y_pred = ifelse(prob_pred > 0.5, 1, 0)
table(test$Survived, y_pred > 0.5)
table(train_test$Survived, y_pred > 0.5)
error <- mean(train_test$Survived != y_pred) # Misclassification error
paste('Accuracy',round(1-error,4))
error <- mean(train_test$Survived != y_pred) # Misclassification error
paste('Accuracy of the model',round(1-error,4))
Prediction <- predict(classifier, type = "response", newdata=new_train)
submit <- data.frame(PassengerId = new_train$PassengerId, Survived = Prediction)
write.csv(submit, file = "muh_modls.csv", row.names = FALSE)
Prediction <- predict(classifier, type = "response", newdata=new_train)
submit <- data.frame(PassengerId = train$PassengerId, Survived = Prediction)
write.csv(submit, file = "muh_modls.csv", row.names = FALSE)
Prediction <- predict(classifier, type = "response", newdata=new_train)
y_pred = ifelse(prob_pred > 0.5, 1, 0)
submit <- data.frame(PassengerId = train$PassengerId, Survived = y_pred)
write.csv(submit, file = "muh_modls.csv", row.names = FALSE)
Prediction <- predict(classifier, type = "response", newdata=new_train)
y_pred = ifelse(Prediction > 0.5, 1, 0)
submit <- data.frame(PassengerId = train$PassengerId, Survived = y_pred)
write.csv(submit, file = "muh_modls.csv", row.names = FALSE)
Prediction <- predict(classifier, type = "response", newdata=new_test)
y_pred = ifelse(Prediction > 0.5, 1, 0)
submit <- data.frame(PassengerId = test$PassengerId, Survived = y_pred)
write.csv(submit, file = "muh_modls.csv", row.names = FALSE)
paste('Age variance: ',var(train_train$Age),', SibSp variance: ',var(train_train$SibSp),', Parch variance: ',var(train_train$Parch),', Fare variance: ',var(train_train$Fare))
standardized.train = cbind(select(train_train, Survived, Pclass, Sex, SibSp, Parch, Embarked, Title, FamilySize), Age = scale(train_train$Age), Fare = scale(train_train$Fare))
paste('Age variance: ',var(standardized.train$Age),', Fare variance: ',var(standardized.train$Fare))
standardized.test = cbind(select(train_test, Survived, Pclass, Sex, SibSp, Parch, Embarked, Title, FamilySize), Age = scale(train_test$Age), Fare = scale(train_test$Fare))
paste(
standardized.test = cbind(select(train_test, Survived, Pclass, Sex, SibSp, Parch, Embarked, Title, FamilySize), Age = scale(train_test$Age), Fare = scale(train_test$Fare))
paste('Age variance: ',var(standardized.test$Age),', Fare variance: ',var(standardized.test$Fare))
standardized.test = cbind(select(train_test, Survived, Pclass, Sex, SibSp, Parch, Embarked, Title, FamilySize), Age = scale(train_test$Age), Fare = scale(train_test$Fare))
paste('Age variance: ',var(standardized.test$Age),', Fare variance: ',var(standardized.test$Fare))
# Fitting Linear SVM to the Training set
classifier = svm(Survived ~ .,
data = standardized.train,
type = 'C-classification',
kernel = 'linear')
# Predicting the Validation set results
y_pred = predict(classifier, newdata = standardized.test[,-which(names(standardized.test)=="Survived")])
# Checking the prediction accuracy
table(test$Survived, y_pred) # Confusion matrix
install.packages('e1071')
library(e1071)
classifier = svm(Survived ~ .,
data = standardized.train,
type = 'C-classification',
kernel = 'linear')
# Predicting the Validation set results
y_pred = predict(classifier, newdata = standardized.test[,-which(names(standardized.test)=="Survived")])
# Checking the prediction accuracy
table(test$Survived, y_pred) # Confusion matrix
# Checking the prediction accuracy
table(train_test$Survived, y_pred) # Confusion matrix
classifier = svm(Survived ~ .,
data = standardized.train,
type = 'C-classification',
kernel = 'linear')
# Predicting the Validation set results
y_pred = predict(classifier, newdata = standardized.test[,-which(names(standardized.test)=="Survived")])
# Checking the prediction accuracy
table(train_test$Survived, y_pred) # Confusion matrix
error <- mean(train_test$Survived != y_pred) # Misclassification error
paste('Accuracy',round(1-error,4))
classifier = svm(Survived ~ .,
data = standardized.train,
type = 'C-classification',
kernel = 'radial')
# Predicting the Validation set results
y_pred = predict(classifier, newdata = standardized.test[,-which(names(standardized.test)=="Survived")])
# Checking the prediction accuracy
table(train_test$Survived, y_pred) # Confusion matrix
error <- mean(train_test$Survived != y_pred) # Misclassification error
paste('Accuracy',round(1-error,4))
tune.results <- tune(svm,
Survived ~ .,
data = standardized.train,
kernel='radial',
ranges=list(cost=2^(-2:2), gamma=2^(-6:-2)))
summary(tune.results)
classifier = svm(Survived ~ .,
data = standardized.train,
type = 'C-classification',
kernel = 'radial',
cost = 2,
gamma = 0.03125)
# Predicting the Validation set results
y_pred = predict(classifier, newdata = standardized.test[,-which(names(standardized.test)=="Survived")])
# Checking the prediction accuracy
table(train_test$Survived, y_pred) # Confusion matrix
error <- mean(train_test$Survived != y_pred) # Misclassification error
paste('Accuracy',round(1-error,4))
Prediction <- predict(classifier, type = "response", newdata=new_test)
y_pred = ifelse(Prediction > 0.5, 1, 0)
submit <- data.frame(PassengerId = test$PassengerId, Survived = y_pred)
write.csv(submit, file = "model_2.csv", row.names = FALSE)
Prediction <- predict(classifier, type = "response", newdata=new_test)
#y_pred = ifelse(Prediction > 0.5, 1, 0)
submit <- data.frame(PassengerId = test$PassengerId, Survived = y_pred)
write.csv(submit, file = "model_2.csv", row.names = FALSE)
summary(Prediction)
str(Prediction)
Prediction <- predict(classifier, type = "response", newdata=new_test)
#y_pred = ifelse(Prediction > 0.5, 1, 0)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "model_2.csv", row.names = FALSE)
standardized.submit= cbind(select(new_test, Survived, Pclass, Sex, SibSp, Parch, Embarked, Title, FamilySize), Age = scale(new_test$Age), Fare = scale(new_test$Fare))
paste('Age variance: ',var(standardized.submit$Age),', Fare variance: ',var(standardized.submit$Fare))
standardized.submit= cbind(select(new_test, Pclass, Sex, SibSp, Parch, Embarked, Title, FamilySize), Age = scale(new_test$Age), Fare = scale(new_test$Fare))
paste('Age variance: ',var(standardized.submit$Age),', Fare variance: ',var(standardized.submit$Fare))
Prediction <- predict(classifier, type = "response", newdata=new_test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "model_2.csv", row.names = FALSE)
#### MODEL 3 - DECISION TREE ####
table(Prediction)
classifier = svm(Survived ~ .,
data = standardized.train,
type = 'C-classification',
kernel = 'radial')
Prediction <- predict(classifier, type = "response", newdata=new_test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "model_2.csv", row.names = FALSE)
table(Prediction)
classifier = svm(Survived ~ .,
data = standardized.train,
type = 'C-classification',
kernel = 'radial')
# Predicting the Validation set results
y_pred = predict(classifier, newdata = standardized.test[,-which(names(standardized.test)=="Survived")])
table(standardized.test$Survived, y_pred) # Confusion matrix
error <- mean(train_test$Survived != y_pred) # Misclassification error
paste('Accuracy',round(1-error,4))
tune.results <- tune(svm,
Survived ~ .,
data = standardized.train,
kernel='radial',
ranges=list(cost=2^(-2:2), gamma=2^(-6:-2)))
summary(tune.results)
classifier = svm(Survived ~ .,
data = standardized.train,
type = 'C-classification',
kernel = 'radial',
cost = 2,
gamma = 0.125)
# Predicting the Validation set results
y_pred = predict(classifier, newdata = standardized.test[,-which(names(standardized.test)=="Survived")])
# Checking the prediction accuracy
table(train_test$Survived, y_pred) # Confusion matrix
error <- mean(train_test$Survived != y_pred) # Misclassification error
paste('Accuracy',round(1-error,4))
standardized.submit= cbind(select(new_test, Pclass, Sex, SibSp, Parch, Embarked, Title, FamilySize), Age = scale(new_test$Age), Fare = scale(new_test$Fare))
paste('Age variance: ',var(standardized.submit$Age),', Fare variance: ',var(standardized.submit$Fare))
Prediction <- predict(classifier, type = "response", newdata=new_test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "model_2.csv", row.names = FALSE)
table(Prediction)
classifier = rpart(Survived ~ ., data = train, method = 'class')
# Tree Visualization
rpart.plot(classifier, extra=4)
classifier = rpart(Survived ~ ., data = train, method = 'class')
# Tree Visualization
rpart.plot(classifier, extra=4)
classifier = rpart(Survived ~ ., data = train, method = 'class')
rpart.plot(classifier, extra=4)
classifier = rpart(Survived ~ ., data = new_train, method = 'class')
rpart.plot(classifier, extra=4)
classifier = rpart(Survived ~ ., data = train_train, method = 'class')
rpart.plot(classifier, extra=4)
# Predicting the Validation set results
y_pred = predict(classifier, newdata = train_test[,-which(names(train_test)=="Survived")], type='class')
# Checking the prediction accuracy
table(train_test$Survived, y_pred) # Confusion matrix
error <- mean(test$Survived != y_pred) # Misclassification error
paste('Accuracy',round(1-error,4))
error <- mean(train_test$Survived != y_pred) # Misclassification error
paste('Accuracy',round(1-error,4))
set.seed(789)
folds = createMultiFolds(train_train$Survived, k = 10, times = 5)
control <- trainControl(method = "repeatedcv", index = folds)
classifier_cv <- train(Survived ~ ., data = train_train, method = "rpart", trControl = control)
install.packages('caret')
library(caret)
set.seed(789)
folds = createMultiFolds(train_train$Survived, k = 10, times = 5)
control <- trainControl(method = "repeatedcv", index = folds)
classifier_cv <- train(Survived ~ ., data = train_train, method = "rpart", trControl = control)
rpart.plot(classifier_cv$finalModel, extra=4)
# Predicting the Validation set results
y_pred = predict(classifier_cv, newdata = train_test[,-which(names(train_test)=="Survived")])
# Checking the prediction accuracy
table(train_test$Survived, y_pred) # Confusion matrix
error <- mean(train_test$Survived != y_pred) # Misclassification error
paste('Accuracy',round(1-error,4))
# Fitting Random Forest Classification to the Training set
set.seed(432)
classifier = randomForest(Survived ~ ., data = train_train)
# Choosing the number of trees
plot(classifier)
# Predicting the Validation set results
y_pred = predict(classifier, newdata = train_test[,-which(names(test)=="Survived")])
# Checking the prediction accuracy
table(train_test$Survived, y_pred) # Confusion matrix
# Predicting the Validation set results
y_pred = predict(classifier, newdata = train_test[,-which(names(train_test)=="Survived")])
# Checking the prediction accuracy
table(train_test$Survived, y_pred) # Confusion matrix
error <- mean(train_test$Survived != y_pred) # Misclassification error
paste('Accuracy',round(1-error,4))
Prediction <- predict(classifier, type = "response", newdata=new_test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "model_muh_forst.csv", row.names = FALSE)
table(Prediction)
set.seed(651)
folds = createMultiFolds(train_train$Survived, k = 10)
control <- trainControl(method = "repeatedcv", index = folds)
classifier_cv <- train(Survived ~ ., data = train_train, method = "rf", trControl = control)
# Predicting the Validation set results
Prediction <- predict(classifier, type = "response", newdata=new_test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "model_muh_forst.csv", row.names = FALSE)
Prediction <- predict(classifier, type = "response", newdata=new_test)
submit <- data.frame(PassengerId = new_test$PassengerId, Survived = Prediction)
write.csv(submit, file = "model_muh_forst.csv", row.names = FALSE)
table(Prediction)
Prediction <- predict(classifier, type = "response", newdata=new_test)
submit <- data.frame(PassengerId = new_test$PassengerId, Survived = Prediction)
write.csv(submit, file = "model_muh_forst.csv", row.names = FALSE)
# Predicting the Validation set results
Prediction <- predict(classifier, type = "response", newdata=new_test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "model_muh_forst.csv", row.names = FALSE)
Prediction <- predict(classifier_cv, type = "response", newdata=new_test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "model_muh_forst.csv", row.names = FALSE)
classifier_cv <- train(Survived ~ ., data = train_train, method = "rf", trControl = control)
Prediction <- predict(classifier_cv, type = "response", newdata=new_test)
Prediction <- predict(classifier_cv, newdata=new_test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "model_muh_forst.csv", row.names = FALSE)
table(Prediction)
gini = as.data.frame(importance(classifier))
gini = data.frame(Feature = row.names(gini),
MeanGini = round(gini[ ,'MeanDecreaseGini'], 2))
gini = gini[order(-gini[,"MeanGini"]),]
ggplot(gini,aes(reorder(Feature,MeanGini), MeanGini, group=1)) +
geom_point(color='red',shape=17,size=2) +
geom_line(color='blue',size=1) +
scale_y_continuous(breaks=seq(0,60,10)) +
xlab("Feature") +
ggtitle("Mean Gini Index of Features") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(gini,aes(reorder(Feature,MeanGini), MeanGini, group=1)) +
geom_point(color='red',shape=17,size=2) +
geom_line(color='blue',size=1) +
scale_y_continuous(breaks=seq(0,60,10)) +
xlab("Feature") +
ggtitle("Mean Gini Index of Features") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(gini,aes(reorder(Feature,MeanGini), MeanGini, group=1)) +
geom_point(color='red',shape=17,size=2)
ggplot(gini,aes(reorder(Feature,MeanGini), MeanGini, group=1))
ggplot(gini,aes(reorder(gini$Feature,gini$MeanGini), gini$MeanGini, group=1))
dev.off()
ggplot(gini,aes(reorder(gini$Feature,gini$MeanGini), gini$MeanGini, group=1)) +
geom_point(color='red',shape=17,size=2) +
geom_line(color='blue',size=1) +
scale_y_continuous(breaks=seq(0,60,10)) +
xlab("Feature") +
ggtitle("Mean Gini Index of Features") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
classifier = naiveBayes(Survived ~ ., data = train_train)
y_pred = predict(classifier, newdata = train_test[,-which(names(train_test)=="Survived")])
table(train_test$Survived, y_pred) # Confusion matrix
error <- mean(test$Survived != y_pred) # Misclassification error
paste('Accuracy',round(1-error,4))
error <- mean(train_test$Survived != y_pred) # Misclassification error
paste('Accuracy',round(1-error,4))
